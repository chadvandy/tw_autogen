--- THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.

---@class campaign_cutscene
local campaign_cutscene = {}

--- Creates a cutscene object. A cutscene must be given a unique string name, a length in seconds and optionally an end callback.
---@param name string #Unique name for the cutscene.
---@param duration number? #optional, default value=nil Cutscene duration in seconds. If nil or 0 is specified then the cutscene will be set to not end unless action_end_cutscene is used, and will only finish when skipped by the player or ended by an external process.
---@param end_callback function? #optional, default value=nil End callback.
---@param send_metrics_data boolean? #optional, default value=nil Send performance data to metrics.
---@return campaign_cutscene #cutscene object 
function campaign_cutscene:new(name, duration, end_callback, send_metrics_data) end

--- Creates a cutscene object that is bound to a cindyscene. When started, the scripted cutscene will automatically start the cindyscene, and will terminate when the cindyscene ends.
---@param name string #Unique name for the cutscene.
---@param end_callback function? #optional, default value=nil End callback.
---@param cindy_scene string #Cindy scene path.
---@param blend_in number? #optional, default value=0 Blend in time, in seconds.
---@param blend_out number? #optional, default value=10 Blend out time, in seconds.
---@return campaign_cutscene #cutscene object 
function campaign_cutscene:new_from_cindyscene(name, end_callback, cindy_scene, blend_in, blend_out) end

--- Sets the cutscene into debug mode for more output.
---@param set_debug boolean? #optional, default value=true set debug
function campaign_cutscene:set_debug(set_debug) end

--- Sets all campaign cutscenes into debug mode for more output.
---@param set_debug boolean? #optional, default value=true set debug
function campaign_cutscene:set_debug_all(set_debug) end

--- Sets whether the cutscene should be skippable or not, and also allows the optional specification of a callback to be called if the cutscene is skipped. Note that if a skip callback and end callback are both set, both will be called (in that order).
---@param set_skippable boolean? #optional, default value=true set skippable
---@param skip_callback function? #optional, default value=nil skip callback
function campaign_cutscene:set_skippable(set_skippable, skip_callback) end

--- Sets whether the dismiss the advisor at the end of the cutscene. By default the advisor is skipped - use this function to disable this behaviour.
---@param dismiss_advice boolean? #optional, default value=true dismiss advice
function campaign_cutscene:set_dismiss_advice_on_end(dismiss_advice) end

--- Sets the cutscene to show cinematic borders whilst playing, or not. Cutscenes by default will show cinematic borders - use this function to disable this behaviour.
---@param show_borders boolean? #optional, default value=true show borders
function campaign_cutscene:set_use_cinematic_borders(show_borders) end

--- Tells the cutscene whether to restore the ui when it ends, or not. Cutscenes by default will restore the ui - use this function to disable this behaviour. This is useful in highly specific circumstances.
---@param restore_ui boolean? #optional, default value=true restore ui
function campaign_cutscene:set_restore_ui(restore_ui) end

--- Tells the cutscene whether to show settlement labels while playing or not. Cutscenes by default will hide settlement labels - use this function to disable this behaviour.
---@param disable_labels boolean? #optional, default value=true disable labels
function campaign_cutscene:set_disable_settlement_labels(disable_labels) end

--- Tells the cutscene whether to make neighbouring regions visible or not. Cutscenes by default will not do this - use this function to enable this behaviour if required. The 'neighbouring' regions in this case are those regions adjacent to the regions currently unshrouded.<br />
--- Setting this property to true also enables the shroud.
---@param disable_labels boolean? #optional, default value=true disable labels
function campaign_cutscene:set_neighbouring_regions_visible(disable_labels) end

--- Tells the cutscene whether to show the shroud during playback, or not. By default the shroud is displayed - use this function to disable it if required.
---@param disable_shroud boolean? #optional, default value=true disable shroud
function campaign_cutscene:set_disable_shroud(disable_shroud) end

--- Tells the cutscene whether to restore the shroud after completion to the state it was in before the cutscene started, or not. By default the shroud is restored - use this function to disable this behaviour if required.
---@param restore_shroud boolean? #optional, default value=true restore shroud
function campaign_cutscene:set_restore_shroud(restore_shroud) end

--- Tells the cutscene whether to show the advisor close button after the cutscene is finished or not. By default the close button is not shown - use this function to show the button at the end of the cutscene.
---@param show_advisor_close_button boolean? #optional, default value=true show advisor close button
function campaign_cutscene:set_show_advisor_close_button_on_end(show_advisor_close_button) end

--- Tells the cutscene system that this cutscene is a faction intro cutscene. Intro cutscenes inform the campaign manager when they start and stop, and also trigger an additional "ScriptEventCampaignIntroCutsceneCompleted" event when the cutscene completes.
---@param is_intro_cutscene boolean? #optional, default value=true is intro cutscene
function campaign_cutscene:set_intro_cutscene(is_intro_cutscene) end

--- Returns whether this cutscene has been set to be an intro cutscene.
---@return boolean #is intro cutscene 
function campaign_cutscene:is_intro_cutscene() end

--- Sets the cutscene end callback. This replaces any end callback previously set (e.g. with campaign_cutscene:new).
---@param end_callback function #end callback
function campaign_cutscene:set_end_callback(end_callback) end

--- Adds the specified callback to the start of the existing end-callback, without overwriting the existing end-callback's contents. If there is no end-callback yet, this cutscene's end-callback will simply be set to the one provided.
---@param callback function #callback to prepend to the existing end-callback
function campaign_cutscene:prepend_end_cutscene(callback) end

--- Returns true if the cutscene has an end callback specified, false otherwise.
---@return boolean #has end callback 
function campaign_cutscene:has_end_callback() end

--- Sets whether the cutscene should call the end callback (supplied when the cutscene is created with <a href="../battle/cutscene.html#function:cutscene:new">cutscene:new) when skipped. By default the cutscene does call this callback - supply false as an argument to prevent it from doing so.
---@param should_call_callback boolean? #optional, default value=true should call callback
function campaign_cutscene:set_call_end_callback_when_skipped(should_call_callback) end

--- Sets whether the cutscene should immediately fade to black, and then optionally fade back to picture (after an optional delay), or not. By default the cutscene system will fade to black immediately if the cutscene is skipped, then wait a second, then fade to picture after a second. Use this function to change this behaviour.
---@param fade_to_black boolean? #optional, default value=true Fade to black immediately on skip.
---@param fade_to_picture_time number? #optional, default value=1 Time in seconds over which the cutscene will fade back to picture. If a negative number is supplied, or no fade to black is set, then no fade to picture is performed.
---@param fade_to_picture_delay number? #optional, default value=1 Time in seconds after the cutscene is skipped between the fade to black and the subsequent fade back to picture.
function campaign_cutscene:set_fade_on_skip(fade_to_black, fade_to_picture_time, fade_to_picture_delay) end

--- Sets a position at which the game camera is repositioned to if the cutscene is skipped. The reposition happens behind a fade to black so the player does not see it.<br />
--- If no position is supplied, the cutscene system takes the current position of the game camera as the skip camera position.<br />
--- Note that this reposition will not happen if the cutscene is not skipped. 
---@param x number? #optional, default value=nil x co-ordinate. If no co-ordinates are set here the function takes the camera position at the moment the function is called.
---@param y number? #optional, default value=nil y co-ordinate.
---@param d number? #optional, default value=nil d co-ordinate.
---@param b number? #optional, default value=nil b co-ordinate.
---@param h number? #optional, default value=nil h co-ordinate.
function campaign_cutscene:set_skip_camera(x, y, d, b, h) end

--- Sets co-ordinates to which the game camera is restored when the cutscene ends. If a restore camera position is specified, the camera is scrolled to that position at the end of the cutscene over the supplied time in seconds. This is useful when it's desired to return the camera to the position it started the cutscene at when the cutscene finishes, or to a different position.<br />
--- If no co-ordinates are supplied, the cutscene system takes the current position of the game camera as the restore camera position.<br />
--- Note that if a skip camera position is set with campaign_cutscene:set_skip_camera, and the cutscene is skipped, the camera will be skipped and not restored. If the cutscene is skipped, has no skip camera position but has a restore camera position set, the camera will be immediately repositioned at the restore camera position while the screen is faded to black.
---@param time number #Time in seconds over which to scroll the camera.
---@param x number? #optional, default value=nil x co-ordinate. If no co-ordinates are set here the function takes the camera position at the moment the function is called.
---@param y number? #optional, default value=nil y co-ordinate.
---@param d number? #optional, default value=nil d co-ordinate.
---@param b number? #optional, default value=nil b co-ordinate.
---@param h number? #optional, default value=nil h co-ordinate.
function campaign_cutscene:set_restore_camera(time, x, y, d, b, h) end

--- Returns true if the cutscene is currently running, false otherwise.
---@return boolean #is active 
function campaign_cutscene:is_active() end

--- Instructs the cutscene to steal input immediately, before campaign_cutscene:start() is called. This is useful for campaign intro cutscenes as there's a short window of opportunity for the player to interact with the game as the loading screen is fading out, before the cutscene starts.<br />
--- Note that cutscenes don't steal input when debug mode is set with campaign_cutscene:set_debug or campaign_cutscene:set_debug_all, which affects this command too.
function campaign_cutscene:steal_input_immediately() end

--- Sets the cutscene music trigger argument to be passed to the music system when the cutscene starts
---@param music_trigger_argument string #A uniquely identifying name for the cutscene relevant to the music system
function campaign_cutscene:set_music_trigger_argument(music_trigger_argument) end

--- Sets relative mode for enqueuing actions on the cutscene. With relative mode enabled, the time specified for each action is relative to the previously-added action, rather than absolute from the start of the cutscene. Relative mode is disabled by default.
function campaign_cutscene:set_relative_mode() end

--- Registers a new cinematic trigger listener. When the cindy scene triggers a script event with the supplied id in script, the supplied function is called.
---@param id string #Cinematic trigger id. This should match the an id of a cinematic event triggered from a cindy scene played during this cutscene.
---@param callback function #Callback to call.
function campaign_cutscene:add_cinematic_trigger_listener(id, callback) end

--- Shows or hides a "Press ESC to continue" subtitle prompt. It is intended that this should be called during an campaign_cutscene:action.
---@param should_show boolean? #optional, default value=true should show
function campaign_cutscene:show_esc_prompt(should_show) end

--- Registers a new action with the cutscene. The action is supplied a function callback, which is called at the appropriate time after the cutscene has been started (assuming the cutscene is not skipped beforehand).
---@param callback function #Action callback to call.
---@param delay number #Delay in seconds after the cutscene starts before calling this action callback (or after the preceeding action, if in relative mode).
function campaign_cutscene:action(callback, delay) end

--- Set the camera position. When using this, it's best to wait a fraction of a second before enacting other camera movements, as the action is not instant and can be overriden by other camera actions.
---@param delay number #The delay in seconds.
---@param camera_coords table #The coordinates to move the camera to. List of numbers as defined in Camera Movement.
function campaign_cutscene:action_set_camera_position(delay, camera_coords) end

--- Scroll the camera from its current location to the specified location.
---@param delay number #The delay in seconds.
---@param scroll_duration number #How long it takes, in seconds, for the camera to reach its new coordinate.
---@param correct_endpoint boolean #Correct endpoint. If true, the game will adjust the final position of the camera so that it's a valid camera position for the game. Set to true if control is being released back to the player after this camera movement finishes.
---@param camera_coords table #The coordinates to scroll the camera to. List of numbers as defined in Camera Movement.
function campaign_cutscene:action_scroll_camera_to_position(delay, scroll_duration, correct_endpoint, camera_coords) end

--- Display some advice.
---@param delay number #The delay in seconds.
---@param advice_key string #Advice thread key.
function campaign_cutscene:action_show_advice(delay, advice_key) end

--- Disable or enable the UI of the specified string keys, as defined in campaign_ui_manager.
---@param delay number #The delay in seconds.
---@param ... any #A variable number of UI override arguments to enable or disable. UI overrides may be specified as multiple string arguments or a single table of strings.
function campaign_cutscene:action_override_ui_visibility(delay, ...) end

--- Fades the scene to black or back to picture over a specified period.
---@param delay number #The delay in seconds.
---@param brightness number #Brightness, as a unary value. Supply a value of 0 to fade to black, supply a value of 1 to fade to picture, or supply a value in between to transition to a partially-faded picture.
---@param duration number #Duration of the fade effect in seconds.
function campaign_cutscene:action_fade_scene(delay, brightness, duration) end

--- Sets a listener to end the cutscene at the specified delay. This will also update the cutscene's internal duration.
---@param delay number #The delay in seconds.
function campaign_cutscene:action_end_cutscene(delay) end

--- Starts the cutscene.
---@return boolean #cutscene was started successfully 
function campaign_cutscene:start() end

--- This function, when called, causes the cutscene to repeatedly stall while the advisor is still speaking and only allow the cutscene to progress once the advisor has finished. If the cutscene contains multiple lines of advice that are played one after the other, this function can be used to ensure that each item of advice only triggers once the previous item has finished playing, so they don't speak over the top of each other. This is useful when laying out multiple items of advice in a cutscene where the length of advice items cannot be known in different languages - a localised version of an advice item in German, for example, might be many seconds longer than the equivalent in English.<br />
--- If a delay argument is passed in then the call to this function is enqueued as an campaign_cutscene:action with that delay. Alternatively, it may be called with no delay within an action.
---@param delay number? #optional, default value=nil Delay in seconds after the cutscene starts before invoking this function.
function campaign_cutscene:wait_for_advisor(delay) end

--- Immediately starts playback of a cindy scene. This is intended to be called within an campaign_cutscene:action callback. If a cindy scene is started this way, the cutscene will automatically terminate it if the cutscene is skipped.
---@param path string #cindy xml path, from the data/ folder.
---@param blend_in number? #optional, default value=nil Blend in duration in seconds.
---@param blend_out number? #optional, default value=nil Blend out duration in seconds.
function campaign_cutscene:cindy_playback(path, blend_in, blend_out) end

--- Issues a call to dismiss the advice without triggering the end of the cutscene. Normally a cutscene skips when advice is dismissed - use this function during an campaign_cutscene:action to circumvent this behaviour.
function campaign_cutscene:dismiss_advice() end

--- This function is called internally when the cutscene has been skipped by the player. Additionally, it may be called by external scripts to force the running cutscene to skip.
function campaign_cutscene:skip() end
