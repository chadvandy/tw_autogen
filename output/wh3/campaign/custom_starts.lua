--- THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.

---@class custom_starts
local custom_starts = {}

--- Give a region to the specified faction.
---@param region_key string #The key of the region to be transferred.
---@param faction_name string #The key of the faction to receive the region.
function custom_starts:region_change(region_key, faction_name) end

--- Give all regions of the absorbed faction to the absorbing faction, and kill all absorbed faction's characters.
---@param absorbing_faction_key string #The key of the faction to absorb the other faction.
---@param absorbed_faction_key string #The key of the faction to be absorbed.
function custom_starts:absorb_other_faction(absorbing_faction_key, absorbed_faction_key) end

--- Change the primary building at the specified region to the specified building.
---@param region string #The region at which the building should be changed.
---@param building string #The building to set the primary slot of the region to.
---@return boolean
function custom_starts:primary_slot_change(region, building) end

--- Change the port slot at the specified region to the specified building.
---@param region string #The key of the region at which the port slot will change.
---@param building string #The key of the building to change the slot to.
---@return boolean
function custom_starts:port_slot_change(region, building) end

--- Change the secondary slot at the given index of a specified region to a building.
---@param region string #The key of the region at which to change the building.
---@param slot_index number #The zero-based index of the secondary slot at which to change the building.
---@param building string #The key of the building to which the slot should change.
---@return boolean
function custom_starts:secondary_slot_change(region, slot_index, building) end

--- Spawn an army on the map for a certain faction using either a quantity of units, or a random army template key.
---@param faction_name string #The key of the faction the army will belong to.
---@param region_name number #The quantity of units to be spawned (in which case random units are created) or the key of the random army template to be used.
---@param x_pos string #The key of the region the army will spawn in.
---@param y_pos number #The x coordinate the army will spawn at.
---@param agent_subtype number #The y coordinate the army will spawn at.
---@param is_leader string #Character subtype of character at the head of the army.
---@param name_table boolean #Make the spawned character the faction leader.
function custom_starts:create_army(faction_name, region_name, x_pos, y_pos, agent_subtype, is_leader, name_table) end

--- Create an army for the leader of the specified faction.
---@param faction_name string #The key of the faction whose leader gets an army.
---@param region_name string #The key of the region the army will spawn in.
---@param x_pos number #The x coordinate at which the army will spawn.
---@param y_pos number #The y coordinate at which the army will spawn.
function custom_starts:create_army_for_faction_leader(faction_name, region_name, x_pos, y_pos) end

--- Teleport a character of a given faction, whichever character is closest to the provided start coordinates.
---@param faction_name string #The key of the faction the teleported character belongs to.
---@param start_x number #The starting x coordinate - the closest character of the given faction to this position will be teleported.
---@param start_y number #The starting y coordinate - the closest character of the given faction to this position will be teleported.
---@param end_x number #The teleport x coordinate.
---@param end_y number #The teleport y coordinate.
---@param is_general boolean #Whether or not the target character is a general. This informs which character nearest the starting coord is selected.
function custom_starts:teleport_character(faction_name, start_x, start_y, end_x, end_y, is_general) end

--- Teleport the leader of the specified faction to these coordinates.
---@param faction_key string #The name of the faction whose leader is to be teleported.
---@param target_x number #The x coordinate to teleport to.
---@param target_y number #The y coordinate to teleport to.
function custom_starts:teleport_character_faction_leader(faction_key, target_x, target_y) end

--- Hide the leader of the faction by killing them and restricting their recruitment.
---@param faction_key string #The key of the faction whose leader will be hidden.
---@param startpos_ID number #The startpos ID of the general to have their recruitment locked. This ought to match the leader of the specified faction.
---@param kill_army boolean #Kill the faction leader's entire army, if true.
function custom_starts:hide_faction_leader(faction_key, startpos_ID, kill_army) end

--- Add and remove the provided lists of units (removals occur per-instance, so three consecutive unit keys results in the removal of 3 units), to the factions' army found closest to the provided coordinate.
---@param faction_name string #The key of the faction for which armies close to the coordinates will be considered.
---@param pos_x number #The x coordinate close to the target army.
---@param pos_y number #The y coordinate close to the target army.
---@param add_units_table table #A list of unit keys to be added. Provide an empty table if no units wanted.
---@param remove_units_table table #A list of unit keys to be removed, per-instance of that unit. Provide an empty table if no units wanted.
---@param general_forename string? #optional, default value=nil The forename of the general whose army will be adjusted. Can be used to handle different starting generals for the same faction receiving different starting units. Otherwise can be left blank.
---@param general_surname string? #optional, default value=nil The surname of the general whose army will be adjusted.
function custom_starts:modify_units_in_army(faction_name, pos_x, pos_y, add_units_table, remove_units_table, general_forename, general_surname) end

--- Add XP to each instance of the given unit key in all of a faction's armies.
---@param faction_name string #The faction for which all units of a type will receive XP.
---@param unit_key string #The key of the unit type to receive XP.
---@param experience number #The amount of XP given to each unit.
function custom_starts:add_xp_to_units(faction_name, unit_key, experience) end

--- Force a change in diplomacy between the two factions.
---@param s_faction string #The source faction.
---@param t_faction string #The target faction.
---@param d_type string #The type of diplomacy to enforce. This is currently limited to 'peace' or 'war'. Allies are not invited to war.
function custom_starts:force_diplomacy_change(s_faction, t_faction, d_type) end

--- Restricts or unrestricts diplomacy types between two factions, using the diplomacy types available in campaign_manager:force_diplomacy. Groups of factions may be specified with the strings "all", "faction:faction_key", "subculture:subculture_key" or "culture:culture_key".
---@param s_faction string #The source faction.
---@param t_faction string #The target faction.
---@param diplomacy string #The diplomacy type being restricted or allowed, as specified in campaign_manager:force_diplomacy.
---@param can_offer boolean #If the source faction can offer this diplomatic relationship to the target.
---@param can_offer boolean #If the source faction can accept this diplomatic relationship to the target.
function custom_starts:block_diplomacy(s_faction, t_faction, diplomacy, can_offer, can_offer) end

--- Abandon the specified region key, turning it to ruins.
---@param region_key string #The key of the region to be abandoned.
function custom_starts:abandon_region(region_key) end

--- Kills the specified faction key, abandoning all its regions and killing all armies.
---@param faction_key string #The key of the faction to be killed.
function custom_starts:kill_faction(faction_key) end

--- Apply an effect bundle to the character of the specified faction nearest the provided location.
---@param faction_name string #The key name of the faction for which characters will be considered.
---@param x_pos number #The x coordinate from which the target character is searched.
---@param y_pos number #The y coordinate from which the target character is searched.
---@param bundle number #The key of the bundle to apply.
---@param duration number #The turn duration the bundle will last for, 0 being infinite turns.
function custom_starts:apply_effect_bundle_character(faction_name, x_pos, y_pos, bundle, duration) end

--- Force the specified faction to adopt the specified AI personality.
---@param faction_key string #Faction key
---@param personality_key string #Personality key
function custom_starts:force_change_faction_cai_personality(faction_key, personality_key) end

--- Adjusts specified pooled resource to target faction.
---@param faction_name string #The faction name to adjust the specified pooled resource for.
---@param pooled_resource_key string #The pooled resource to adjust values for.
---@param pooled_resource_factor_key string #The factor through which the resource is adjusted for the faction
---@param the_amount_to_adjust_by number, #the amount to adjust by
function custom_starts:add_pooled_resource_to_faction(faction_name, pooled_resource_key, pooled_resource_factor_key, the_amount_to_adjust_by) end

--- Generate a random army using pre-defined army sets per subculture.
---@param subculture string #The subculture of the army to be generated: each subculture has a particular 'standard' army template in this function.
---@param num_units number #The size of the army to be generated.
---@return string
function custom_starts:generate_random_army(subculture, num_units) end
